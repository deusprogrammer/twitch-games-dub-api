let express,mongoose,bodyparser,cors,passport,jwtAuthStrategy;_938‍.w("express",[["default",["express"],function(v){express=v}]]);_938‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_938‍.w("body-parser",[["default",["bodyparser"],function(v){bodyparser=v}]]);_938‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_938‍.w("passport",[["default",["passport"],function(v){passport=v}]]);_938‍.w("./api/config/passportConfig",[["jwtAuthStrategy",["jwtAuthStrategy"],function(v){jwtAuthStrategy=v}]]);





const videoRoutes = require('./api/routes/videos');



let app = express();
let port = process.env.PORT || 8080;

passport.use(jwtAuthStrategy);

app.use(cors());
app.options('*', cors());
app.use(bodyparser.json());
app.use(express.json({limit: "500Mb"}));
app.use(bodyParser.urlencoded({limit: '500mb', extended: true}));
app.use(passport.initialize());

// Mongoose instance connection url connection
const databaseUrl = process.env.TGD_DB_URL;
mongoose.Promise = global.Promise;

/*
 * Connect to database
*/

var connectWithRetry = function() {
    return mongoose.connect(databaseUrl, function(err) {
        if (err) {
            console.warn('Failed to connect to mongo on startup - retrying in 5 sec');
            setTimeout(connectWithRetry, 5000);
        }
    });
};
connectWithRetry();

app.set('etag', false);
app.use((req, res, next) => {
    res.set('Cache-Control', 'no-store');
    next();
});

/*
 * Routes 
 */
//app.use('/videos', passport.authenticate("jwt", { session: false }), videoRoutes);
app.use('/videos', videoRoutes);

app.listen(port);
_938‍.g.console.log('budget RESTful API server started on: ' + port);