let storeVideo,trimVideo,createPayloadZip,readFile,writeFile,authenticatedUserHasRole,getAuthenticatedTwitchUserId;_ce3‍.w("../utils/VideoTools",[["storeVideo",["storeVideo"],function(v){storeVideo=v}],["trimVideo",["trimVideo"],function(v){trimVideo=v}],["createPayloadZip",["createPayloadZip"],function(v){createPayloadZip=v}],["readFile",["readFile"],function(v){readFile=v}],["writeFile",["writeFile"],function(v){writeFile=v}]]);_ce3‍.w("../utils/SecurityHelper",[["authenticatedUserHasRole",["authenticatedUserHasRole"],function(v){authenticatedUserHasRole=v}],["getAuthenticatedTwitchUserId",["getAuthenticatedTwitchUserId"],function(v){getAuthenticatedTwitchUserId=v}]]);const express = require('express');
var router = express.Router();


var Videos = require('../models/videos');



router.route("/")
    .get(async (request, response) => {
        //let twitchUser = getAuthenticatedTwitchUserId(request);

        try {
            let videos = await Videos.find({}, null).exec();

            return response.json(videos);
        } catch (error) {
            _ce3‍.g.console.error(error);
            response.status(500);
            return response.send(error);
        }
    })
    .post(async (request, response) => {
        //let twitchUser = getAuthenticatedTwitchUserId(request);

        let buffer = Buffer.from(request.body.videoPayload, "base64");
        
        try {
            let trimmedByteStream = await trimVideo(buffer, request.body.startTime, request.body.endTime);
            let video = await storeVideo(trimmedByteStream, "123456", request.body.subtitles);
            return response.json(video);
        } catch (error) {
            _ce3‍.g.console.error(error);
            response.status(500);
            return response.send(error);
        }
    });

router.route("/:id/zip")
    .get(async (request, response) => {
        //let twitchUser = getAuthenticatedTwitchUserId(request);

        try {
        let video = await Videos.find({_id: request.params.id})
        let byteStream = await readFile(video.videoPath);
        let dataUri = await createPayloadZip(byteStream, video.subtitles);
        return response.json({
            dataUri
        });
        } catch (error) {
            _ce3‍.g.console.error(error);
            response.status(500);
            return response.send(error);
        }
    });

router.route("/processed")
    .post(async (request, response) => {
        //let twitchUser = getAuthenticatedTwitchUserId(request);

        let buffer = Buffer.from(request.body.videoPayload, "base64");
        
        try {
            let trimmedByteStream = await trimVideo(buffer, request.body.startTime, request.body.endTime);
            let dataUri = await createPayloadZip(trimmedByteStream, request.body.subtitles);
			return response.json({
                dataUri
            });
        } catch (error) {
            _ce3‍.g.console.error(error);
            response.status(500);
            return response.send(error);
        }
    });

module.exports = router;